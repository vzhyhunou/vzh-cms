import{g as p}from"./index-6e4e2e79.js";var i={exports:{}},w="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function c(e){this.message=e}c.prototype=new Error;c.prototype.name="InvalidCharacterError";function f(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new c("'atob' failed: The string to be decoded is not correctly encoded.");for(var n=0,r,o,u=0,d="";o=t.charAt(u++);~o&&(r=n%4?r*64+o:o,n++%4)?d+=String.fromCharCode(255&r>>(-2*n&6)):0)o=w.indexOf(o);return d}var I=typeof window<"u"&&window.atob&&window.atob.bind(window)||f,v=I;function k(e){return decodeURIComponent(v(e).replace(/(.)/g,function(t,n){var r=n.charCodeAt(0).toString(16).toUpperCase();return r.length<2&&(r="0"+r),"%"+r}))}var E=function(e){var t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Illegal base64url string!"}try{return k(t)}catch{return v(t)}},y=E;function a(e){this.message=e}a.prototype=new Error;a.prototype.name="InvalidTokenError";i.exports=function(e,t){if(typeof e!="string")throw new a("Invalid token specified");t=t||{};var n=t.header===!0?0:1;try{return JSON.parse(y(e.split(".")[n]))}catch(r){throw new a("Invalid token specified: "+r.message)}};i.exports.InvalidTokenError=a;var x=i.exports;const P=p(x),l="token",h=e=>localStorage.setItem(l,e),s=()=>localStorage.getItem(l),g=()=>localStorage.removeItem(l),m=()=>{const e=s();return e?P(e):{}},C=()=>({login:({username:e,password:t})=>{const r={Authorization:`Basic ${btoa(`${e}:${t}`)}`};return fetch("/login",{headers:r}).then(o=>{if(o.status<200||o.status>=300)throw new Error(o.statusText);return o.text()}).then(h)},logout:e=>Promise.resolve().then(g).then(()=>{if(typeof e=="string")return e}),checkError:({status:e})=>Promise.resolve().then(()=>{if(e===401||e===403)return g(),Promise.reject()}),checkAuth:()=>s()?Promise.resolve():Promise.reject(),getPermissions:()=>Promise.resolve().then(m).then(({roles:e})=>e),getUserId:()=>Promise.resolve().then(m).then(({sub:e})=>e),setToken:e=>Promise.resolve(e).then(h),getToken:()=>Promise.resolve().then(s)});export{C as default};
